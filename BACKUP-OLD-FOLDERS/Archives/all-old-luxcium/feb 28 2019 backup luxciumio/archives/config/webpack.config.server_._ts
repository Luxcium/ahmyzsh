/** @format */

import path from 'path';
import webpack from 'webpack';
// import { envState } from './envStates';

// export function buildServer(mode: envState) {
const config: webpack.Configuration = {
  mode: 'production',
  entry: './app.ts',
};

const compiler = webpack(config);
compiler.run((err: Error, stats: webpack.Stats) => {
  if (err) {
    throw err;
  }
  console.dir(stats);
});

// }
module.exports = {
  mode: 'development',
  entry: './foo.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'foo.bundle.js',
  },
};

// export class Configuration {
//   constructor(
//     /** Enable production optimizations or development hints. */
//     public mode?: 'development' | 'production' | 'none',
//     /** Name of the configuration. Used when loading multiple configurations. */
//     public name?: string,
//     /**
//      * The base directory (absolute path!) for resolving the `entry` option.
//      * If `output.pathinfo` is set, the included pathinfo is shortened to this directory.
//      */
//     public context?: string,
//     public entry?: string | string[] | Entry | EntryFunc,
//     /** Choose a style of source mapping to enhance the debugging process.
//     These values can affect build and rebuild speed dramatically. */
//     public devtool?: Options.Devtool,
//     /** Options affecting the output. */
//     public output?: Output,
//     /** Options affecting the normal modules (NormalModuleFactory) */
//     public module?: Module,
//     /** Options affecting the resolving of modules. */
//     public resolve?: Resolve,
//     /** Like resolve but for loaders. */
//     public resolveLoader?: ResolveLoader,
//     /**
//      * Specify dependencies that shouldn’t be resolved by webpack,
//      * but should become dependencies of the resulting bundle.
//      * The kind of the dependency depends on output.libraryTarget.
//      */
//     public externals?: ExternalsElement | ExternalsElement[],
/*
//      * - "web" Compile for usage in a browser-like environment (default).
//      * - "webworker" Compile as WebWorker.
//      * - "node" Compile for usage in a node.js-like environment (use require to load chunks).
//      * - "async-node" Compile for usage in a node.js-like environment (use fs and vm to load chunks async).
//      * - "node-webkit" Compile for usage in webkit, uses jsonp chunk loading but also supports
//      *    builtin node.js modules plus require(“nw.gui”) (experimental)
//      * - "atom" Compile for usage in electron (formerly known as atom-shell),
supports require for modules necessary to run Electron.
//      * - "electron-renderer" Compile for Electron for renderer process,
providing a target using JsonpTemplatePlugin, FunctionModulePlugin for browser
//      *   environments and NodeTargetPlugin and ExternalsPlugin for CommonJS and Electron built-in modules.
//      * - "electron-main" Compile for Electron for main process.
//      * - "atom" Alias for electron-main.
//      * - "electron" Alias for electron-main.
   */
//     public target?:
//       | 'web'
//       | 'webworker'
//       | 'node'
//       | 'async-node'
//       | 'node-webkit'
//       | 'atom'
//       | 'electron'
//       | 'electron-renderer'
//       | 'electron-main'
//       | ((compiler?: any) => void),
//     /** Report the first error as a hard error instead of tolerating it. */
//     public bail?: boolean,
//     /** Capture timing information for each module. */
//     public profile?: boolean,
//     /** Cache generated modules and chunks to improve performance for multiple incremental builds. */
//     public cache?: boolean | object,
//     /** Enter watch mode, which rebuilds on file change. */
//     public watch?: boolean,
//     public watchOptions?: Options.WatchOptions,
//     /** Switch loaders to debug mode. */
//     public debug?: boolean,
//     /** Include polyfills or mocks for various node stuff */
//     public node?: Node | false,
//     /** Set the value of require.amd and define.amd. */
//     public amd?: { [moduleName: string]: boolean },
//     /** Used for recordsInputPath and recordsOutputPath */
//     public recordsPath?: string,
//     /** Load compiler state from a json file. */
//     public recordsInputPath?: string,
//     /** Store compiler state to a json file. */
//     public recordsOutputPath?: string,
//     /** Add additional plugins to the compiler. */
//     public plugins?: Plugin[],
//     /** Stats options for logging  */
//     public stats?: Options.Stats,
//     /** Performance options */
//     public performance?: Options.Performance | false,
//     /** Limit the number of parallel processed modules. Can be used to fine tune performance or to get more reliable profiling results */
//     public parallelism?: number,
//     /** Optimization options */
//     public optimization?: Options.Optimization,
//   ) {}
// }
